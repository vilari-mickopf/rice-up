#!/bin/bash

DOTFILES=$HOME/.dotfiles

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
RESET='\033[0m'


usage() {
    echo 'Usage: rice [-w | --wm] [-b | --boot] [-s | --sh] [-v | --vim] [-a | --all]'
    echo '            [-c | --config-only]'
    echo '  -w | --wm           setup window manager'
    echo '  -b | --boot         setup other applications'
    echo '  -s | --sh           setup shell'
    echo '  -v | --vim          setup vim'
    echo '  -a | --all          equivalent of running -wsvo'
    echo
    echo '  -c | --config-only  Avoid installing packages with pacman/yay.'
    echo '                      This will only download dotfiles and place them to'
    echo '                      proper locations.'
}

continue_prompt() {
    read -p ":: $(echo -e ${YELLOW}Proceed with ricing?${RESET} [y/N]: )" confirm && \
        [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || return 1

    return 0
}

check() {
    local command=("$@")
    "${command[@]}" || continue_prompt || exit
}

is_installed() {
    package=$1
    pacman -Qi $package &>/dev/null
    return $?
}

setup_yay() {
    is_installed yay
    [[ $? == 0 ]] && return

    echo -e "${YELLOW}Yay is not installed!${RESET}"
    echo -e "${CYAN}Installing yay - Yet another Yaourt${RESET}"

    # Get git
    if [[ $INSTALL_PKGS == 1 ]]; then
        is_installed git
        [[ $? != 0 ]] && check sudo pacman -S git --noconfirm
    fi

    echo -e "${BLUE}Get yay${RESET}"
    check git clone https://aur.archlinux.org/yay.git $HOME/yay

    echo -e "${BLUE}Makepkg yay${RESET}"
    current_dir=$(pwd)
    check cd $HOME/yay
    check makepkg -si --noconfirm

    cd $current_dir
    [[ -d $HOME/yay ]] && check rm -rf $HOME/yay
}

install_packages() {
    pkgs=($1)

    to_install=()
    for pkg in ${pkgs[@]}; do
        is_installed $pkg
        [[ $? == 0 ]] && echo -e "${YELLOW}$pkg${RESET} is already installed." && continue
        to_install+=($pkg)
    done

    [[ ${#to_install[@]} == 0 ]] && \
        echo -e "${GREEN}All packages are already installed.${RESET}\n" && return 0

    echo -e "${YELLOW}Packages not installed:${RESET} ${to_install[@]}"
    yay -S ${to_install[@]} --noconfirm --overwrite "*"
    [[ $? != 0 ]] && echo -e "${RED}Failed to install packages.${RESET}\n" && return 1
    echo -e "${GREEN}Packages installed.${RESET}\n"

    return 0
}

install_groups() {
    groups=($1)

    for group in ${groups[@]}; do
        group_packages=$(pacman -Sg $group | sed 's/[^ ]* //')
        check install_packages "$group_packages"
    done

    return 0
}

get_dotfiles() {
    echo -e "${CYAN}Collecting dotfiles${RESET}"

    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing git${RESET}"
        packages=(git)
        check install_packages "${packages[*]}"
    fi

    [[ -d $DOTFILES ]] && check rm -rf $DOTFILES
    check git clone https://github.com/vilari-mickopf/dotfiles.git $DOTFILES
}

setup_i3() {
    echo -e "${MAGENTA}Setup i3${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing i3 packages${RESET}"
        packages=(i3-gaps i3blocks i3lock-color alternating-layouts-git i3-swallow-git)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure i3${RESET}"
    [[ -d $HOME/.config/i3 ]] && check rm -rf $HOME/.config/i3
    check cp -r $DOTFILES/.config/i3 $HOME/.config

    echo -e "${BLUE}Configure user dirs${RESET}"
    mkdir -p ~/Projects ~/Music ~/Pictures ~/Videos ~/Downloads
    check cp $DOTFILES/.config/user-dirs.dirs $HOME/.config
    check cp $DOTFILES/.config/user-dirs.locale $HOME/.config

    echo -e "${BLUE}Configure mimeapps${RESET}"
    check cp $DOTFILES/.config/mimeapps.list $HOME/.config
    check sudo ln -sf $HOME/.config/mimeapps.list /root/.config

    echo -e "${BLUE}Configure wallpaper${RESET}"
    check cp -r $DOTFILES/Pictures $HOME
    check cp -r $DOTFILES/Videos $HOME

    echo -e "${BLUE}Configure gtk${RESET}"
    check cp -r $DOTFILES/.config/gtk-2.0 $HOME/.config
    check cp -r $DOTFILES/.config/gtk-3.0 $HOME/.config

    # wait only 300ms instead of few seconds on authentication failure
    echo -e "${BLUE}Configure pam${RESET}"
    [[ -d $HOME/.config/pam ]] && check sudo rm -rf $HOME/.config/pam
    check cp -r $DOTFILES/.config/pam $HOME/.config
    check sudo ln -sf $HOME/.config/pam/system-auth /etc/pam.d
    check sudo chown root: $HOME/.config/pam/system-auth

    # security -- disable locking the account on three consecutive authentication failures
    echo -e "${BLUE}Configure faillock${RESET}"
    [[ -d $HOME/.config/security ]] && check sudo rm -rf $HOME/.config/security
    check cp -r $DOTFILES/.config/security $HOME/.config
    check sudo ln -sf $HOME/.config/security/faillock.conf /etc/security
    check sudo chown root: $HOME/.config/security/faillock.conf

    echo -e "${BLUE}Configure limits${RESET}"
    check sudo sudo ln -sf $HOME/.config/security/limits.conf /etc/security
    check sudo chown root: $HOME/.config/security/limits.conf

    # systemd
    echo -e "${BLUE}Configure journald${RESET}"
    [[ -d $HOME/.config/systemd ]] && check sudo rm -rf $HOME/.config/systemd
    check cp -r $DOTFILES/.config/systemd $HOME/.config
    check sudo ln -sf $HOME/.config/systemd/journald.conf /etc/systemd/
    check sudo chown root: $HOME/.config/systemd/journald.conf
}

setup_theme() {
    echo -e "${MAGENTA}Setup theme${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing theme packages${RESET}"
        packages=(sweet-gtk-theme-nova-git lxappearance paper-icon-theme-git
                  xcursor-vanilla-dmz arc-gtk-theme gtk-engine-murrine)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure icons${RESET}"
    check cp -r $DOTFILES/.local/share/icons/default $HOME/.local/share/icons
    check sudo cp -r $DOTFILES/.local/share/icons/default /usr/share/icons
}

setup_pulse() {
    echo -e "${MAGENTA}Setup pulseaudio${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing pulseaudio packages${RESET}"
        packages=(pulseaudio pulseaudio-alsa ncpamixer pavucontrol)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure pulseaudio${RESET}"
    check cp -r $DOTFILES/.config/pulse $HOME/.config

    echo -e "${BLUE}Configure ncpamixer${RESET}"
    check cp $DOTFILES/.config/ncpamixer.conf $HOME/.config

    echo -e "${BLUE}Configure pavucontrol${RESET}"
    volume_change_file=/usr/share/sounds/freedesktop/stereo/audio-volume-change.oga
    [[ -f $volume_change_file ]] && check sudo mv "$volume_change_file" \
                                                  "$volume_change_file-DISCARDED-TOO-ANNOYING"

    echo -e "${BLUE}Disable beep on boot${RESET}"
    echo 'blacklist pcspkr' | sudo tee /etc/modprobe.d/nobeep.conf > /dev/null

    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Install audiocast packages${RESET}"
        packages=(pulseaudio pulseaudio-rtp nmap netcat)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure audiocast${RESET}"
    current_dir=$(pwd)

    # audiocast
    [[ -d $HOME/audiocast ]] && check rm -rf $HOME/audiocast
    check git clone https://github.com/vilari-mickopf/audiocast.git $HOME/audiocast
    check cd $HOME/audiocast
    check ./install server
    check cd $current_dir
    [[ -d $HOME/audiocast ]] && check rm -rf $HOME/audiocast
}

setup_touch() {
    echo -e "${MAGENTA}Setup touchpad${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing touchpad packages${RESET}"
        packages=(libinput)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure touchpad${RESET}"
    [[ -d $HOME/.config/touchpad ]] && check sudo rm -rf $HOME/.config/touchpad
    check cp -r $DOTFILES/.config/touchpad $HOME/.config
    check sudo ln -sf $HOME/.config/touchpad/* /etc/X11/xorg.conf.d
    check sudo chown -R root: $HOME/.config/touchpad/
}

setup_dash() {
    echo -e "${MAGENTA}Setup dash${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing dash packages${RESET}"
        packages=(dash)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure dash${RESET}"
    check sudo ln -sfT dash /usr/bin/sh
}

setup_dunst() {
    echo -e "${MAGENTA}Setup dunst${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing dunst packages${RESET}"
        packages=(dunst)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure dunst${RESET}"
    check cp -r $DOTFILES/.config/dunst $HOME/.config
}

setup_picom() {
    echo -e "${MAGENTA}Setup picom${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing picom packages${RESET}"
        packages=(picom-git)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure picom${RESET}"
    check cp -r $DOTFILES/.config/picom $HOME/.config
}

setup_rofi() {
    echo -e "${MAGENTA}Setup rofi${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing rofi packages${RESET}"
        packages=(rofi)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure rofi${RESET}"
    check cp -r $DOTFILES/.config/rofi $HOME/.config
}

setup_xorg() {
    echo -e "${MAGENTA}Setup xorg${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing xorg packages${RESET}"
        groups=(xorg)
        check install_groups "${groups[*]}"

        packages=(xkb-switch xorg-setxkbmap xorg-xset xorg-xsetroot)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure xresources${RESET}"
    check cp -r $DOTFILES/.config/Xresources.d $HOME/.config
    check sudo ln -sf $HOME/.config/Xresources.d /root/.config
}

setup_term() {
    echo -e "${MAGENTA}Setup terminal${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing terminal packages${RESET}"
        packages=(xurls)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure terminal${RESET}"
    current_dir=$(pwd)
    [[ -d $HOME/.config/suckless/st ]] && check rm -rf $HOME/.config/suckless/st
    check git clone https://github.com/vilari-mickopf/st.git $HOME/.config/suckless/st
    check cd $HOME/.config/suckless/st
    check sudo make clean install
    chek cd $current_dir
}

setup_ranger() {
    echo -e "${MAGENTA}Setup ranger${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        packages=(ranger ueberzug dragon-drag-and-drop)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure ranger${RESET}"
    check cp -r $DOTFILES/.config/ranger $HOME/.config
    check sudo ln -sf $HOME/.config/ranger /root/.config
}

setup_feh() {
    echo -e "${MAGENTA}Setup feh${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        packages=(feh)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure feh${RESET}"
    check cp -r $DOTFILES/.config/feh $HOME/.config
}

setup_zathura() {
    echo -e "${MAGENTA}Setup magenta${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        packages=(zathura zathura-pdf-mupdf zathura-djvu zathura-ps)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure zathura${RESET}"
    check cp -r $DOTFILES/.config/zathura $HOME/.config
}

setup_ncmpcpp() {
    echo -e "${MAGENTA}Setup ncmpcpp${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        packages=(mpd ncmpcpp)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure mpd${RESET}"
    check cp -r $DOTFILES/.config/mpd $HOME/.config

    echo -e "${BLUE}Start mpd services${RESET}"
    check systemctl --user start mpd
    check systemctl --user enable mpd

    echo -e "${BLUE}Configure ncmpcpp${RESET}"
    check cp -r $DOTFILES/.config/ncmpcpp $HOME/.config
}

setup_wicd() {
    echo -e "${MAGENTA}Setup wicd${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        packages=(wicd-patched)
        check install_packages "${packages[*]}"
    fi

    # TODO: add wicd setup
    echo -e "${BLUE}Configure wicd${RESET}"
    [[ -d $HOME/.config/wicd ]] && check sudo rm -rf $HOME/.config/wicd
    check cp -r $DOTFILES/.config/wicd $HOME/.config
    [[ -d /etc/wicd/scripts ]] && check sudo rm -rf /etc/wicd/scripts
    check sudo ln -sf $HOME/.config/wicd/scripts /etc/wicd
    check sudo chown -R root: $HOME/.config/wicd/scripts

    echo -e "${BLUE}Start wicd services${RESET}"
    check sudo systemctl enable wicd
    check sudo systemctl start wicd
}

setup_acpid() {
    echo -e "${MAGENTA}Setup acpid${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        packages=(acpid)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure acpi${RESET}"
    [[ -d $HOME/.config/acpi ]] && check sudo rm -rf $HOME/.config/acpi
    check cp -r $DOTFILES/.config/acpi $HOME/.config
    check sudo ln -sf $HOME/.config/acpi/handler.sh /etc/acpi
    check sudo chown root: $HOME/.config/acpi/handler.sh

    echo -e "${BLUE}Start acpi services${RESET}"
    check sudo systemctl enable acpid
    check sudo systemctl start acpid
}

setup_ly() {
    echo -e "${MAGENTA}Setup ly${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        packages=(ly)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure ly${RESET}"
    [[ -d $HOME/.config/ly ]] && check sudo rm -rf $HOME/.config/ly
    check cp -r $DOTFILES/.config/ly $HOME/.config
    check sudo ln -sf $HOME/.config/ly/config.ini /etc/ly

    echo -e "${BLUE}Start ly services${RESET}"
    check sudo systemctl enable ly
    check sudo systemctl start ly
}

setup_mkinitcpio() {
    echo -e "${MAGENTA}Setup mkinitcpio${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        packages=(mkinitcpio-colors-git)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure mkinitcpio${RESET}"
    [[ -d $HOME/.config/mkinitcpio ]] && check sudo rm -rf $HOME/.config/mkinitcpio
    check cp -r $DOTFILES/.config/mkinitcpio $HOME/.config
    check sudo ln -sf $HOME/.config/mkinitcpio/mkinitcpio.conf /etc
    check sudo chown root: $HOME/.config/mkinitcpio/mkinitcpio.conf
    check sudo ln -sf $HOME/.config/mkinitcpio/vconsole.conf /etc
    check sudo chown root: $HOME/.config/mkinitcpio/vconsole.conf

    echo -e "${BLUE}Generate new image${RESET}"
    check sudo mkinitcpio -p linux
}

setup_oblogout() {
    echo -e "${MAGENTA}Setup oblogout${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        packages=(adeos-oblogout-git oblogout-py3-git)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure oblogout${RESET}"
    [[ -d $HOME/.config/oblogout ]] && check sudo rm -rf $HOME/.config/oblogout
    check cp -r $DOTFILES/.config/oblogout $HOME/.config
    check sudo ln -sf $HOME/.config/oblogout/oblogout.conf /etc/oblogout.conf
    check sudo chown root: $HOME/.config/oblogout/oblogout.conf
}

setup_wireshark() {
    echo -e "${MAGENTA}Setup wireshark${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        packages=(wireshark)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure wireshark${RESET}"
    check sudo usermod -a -G wireshark $USER
}

setup_git() {
    echo -e "${MAGENTA}Setup git${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        packages=(git)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure git${RESET}"
    check cp -r $DOTFILES/.config/git $HOME/.config
    check git --git-dir=$HOME/.dotfiles/.git/ --work-tree=$HOME/ config status.showUntrackedFiles no
}

setup_upower() {
    echo -e "${MAGENTA}Setup upower${RESET}"
    if [[ $INSTALL_PKGS == 1 ]]; then
        packages=(upower)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Start upower services${RESET}"
    check sudo systemctl enable upower
    check sudo systemctl start upower
}

setup_wm() {
    echo -e "${MAGENTA}Setting window manager${RESET}"

    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing firmware packages${RESET}"
        packages=(aic94xx-firmware wd719x-firmware upd72020x-fw)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Installing display manager packages${RESET}"
        packages=(arandr srandrd)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Installing file manager packages${RESET}"
        packages=(udiskie dmenu rofi thunar ntfs-3g dtrx file-roller atool bzip2
                  cpio gzip lha xz lzop p7zip lzip tar unace unrar zip unzip)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Installing audio base packages${RESET}"
        packages=(python-pyalsa alsa-utils alsa-firmware alsa-lib alsa-oss
                  alsa-plugins pulseaudio ponymix)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Installing network base packages${RESET}"
        packages=(wireless_tools net-tools arp-scan)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Installing media player packages${RESET}"
        packages=(maim mplayer mpv vlc timidity++ wildmidi)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Installing fonts${RESET}"
        adobe_fonts=$(pacman -Ssq adobe-source)
        packages=(ttf-ubuntu-font-family otf-font-awesome noto-fonts
                  noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ttf-symbola
                  ttf-joypixels awesome-terminal-fonts python-fontawesome
                  nerd-fonts-inconsolata $adobe_fonts)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Installing apps${RESET}"
        # packages=(calcurse battop wmctrl python-colorama curl wget git highlight
        packages=(calcurse wmctrl python-colorama curl wget git highlight
                  parcellite bootiso python-bidi light-git xidlehook
                  google-chrome slack-desktop viber remmina
                  perl-file-mimeinfo checkupdates+aur)
        check install_packages "${packages[*]}"

        # pacman
        echo -e "${MAGENTA}Configuring pacman${RESET}"
        [[ -d $HOME/.config/pacman ]] && sudo rm -rf $HOME/.config/pacman
        check cp -r $DOTFILES/.config/pacman $HOME/.config
        check sudo ln -sf $HOME/.config/pacman/pacman.conf /etc
        check sudo chown root: $HOME/.config/pacman/pacman.conf
    fi

    setup_i3 && echo
    setup_theme && echo
    setup_pulse && echo
    setup_touch && echo
    setup_dash && echo
    setup_dunst && echo
    setup_picom && echo
    setup_rofi && echo
    setup_xorg && echo
    setup_term && echo
    setup_ranger && echo
    setup_feh && echo
    setup_zathura && echo
    setup_ncmpcpp && echo
    setup_git && echo
    setup_wicd && echo
    setup_acpid && echo
    setup_ly && echo
    setup_mkinitcpio && echo
    setup_oblogout && echo
    setup_wireshark && echo
    setup_upower && echo

    # slack theme: #282C34,#272C33,#D19A66,#282C34,#282C34,#ABB2BF,#98C379,#62AFEE,#282C34,#ABB2BF
    # duckduckgo theme: onedarktheme
}

setup_boot() {
    echo -e "${MAGENTA}Setting boot${RESET}"

    [[ -z $(ls /sys/firmware/efi/efivars/) ]] \
            && echo -e "${RED}EFI not available${RESET}" && return

    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing boot packages${RESET}"
        packages=(refind)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure refind template${RESET}"
    cp -r $DOTFILES/.config/refind $HOME/.config/

    echo -e "${BLUE}Configure refind${RESET}"
    root=$(df / | sed '1d' | awk '{ print $1 }')
    swap=$(cat /proc/swaps | sed '1d' | awk '{ print $1 }')

    root_uuid=$(sudo blkid $root | grep -o '\bPARTUUID=.*' | sed 's/"//'g)
    swap_uuid=$(sudo blkid $swap | grep -o '\bPARTUUID=.*' | sed 's/"//'g)

    option='resume=<swap> root=<root> rw add_efi_memmap'
    new_option="resume=$swap_uuid root=$root_uuid rw add_efi_memmap"
    check sudo cat $HOME/.config/refind/refind_template.conf | \
        sed "s/$option/$new_option/g" | sudo tee /boot/EFI/refind/refind.conf > /dev/null

    echo -e "${BLUE}Configure theme${RESET}"
    [[ -d $HOME/rEFInd-minimal ]] && rm -rf $HOME/rEFInd-minimal
    check git clone https://github.com/EvanPurkhiser/rEFInd-minimal.git $HOME/rEFInd-minimal

    [[ -d /boot/EFI/refind/themes/rEFInd-minimal ]] && \
            check sudo rm -rf /boot/EFI/refind/themes/rEFInd-minimal
    check sudo cp -r $HOME/rEFInd-minimal /boot/EFI/refind/themes/
    [[ -d $HOME/rEFInd-minimal ]] && check rm -rf $HOME/rEFInd-minimal
}

setup_sh() {
    echo -e "${MAGENTA}Setting shell${RESET}"

    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Installing shell packages${RESET}"
        packages=(git wget curl fzf glib2 zsh zsh-completions bash-completion
                  zsh-autosuggestions zsh-syntax-highlighting
                  zsh-vi-mode-git conda-zsh-completion)
        check install_packages "${packages[*]}"
    fi

    echo -e "${BLUE}Configure default shell${RESET}"
    check chsh -s /bin/zsh
    check sudo chsh -s /bin/zsh

    echo -e "${BLUE}Configure shell${RESET}"
    [[ -d $HOME/.config/zsh ]] && check sudo rm -rf $HOME/.config/zsh
    check cp -r $DOTFILES/.config/zsh $HOME/.config
    check sudo chown -R root: $HOME/.config/zsh/zprofile
    check sudo ln -sf $HOME/.config/zsh/zprofile /etc/zsh
    check ln -sf $HOME/.config/zsh/zshrc $HOME/.config/zsh/.zshrc

    echo -e "${BLUE}Configure shell for sudo${RESET}"
    check sudo mkdir -p /root/.config/zsh
    check sudo ln -sf $HOME/.config/zsh/zshrc /root/.config/zsh/.zshrc
    check sudo ln -sf $HOME/.config/zsh/completion /root/.config/zsh
    check sudo ln -sf $HOME/.config/zsh/themes /root/.config/zsh
    check sudo ln -sf $HOME/.config/zsh/plugins /root/.config/zsh
}

setup_vim() {
    echo -e "${MAGENTA}Setting vim${RESET}"

    if [[ $INSTALL_PKGS == 1 ]]; then
        echo -e "${CYAN}Install vim packages${RESET}"
        packages=(curl python python-pynvim python2-pynvim xsel xclip
                  the_silver_searcher ripgrep)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Install latest neovim-nightly${RESET}"
        check rm -rf $HOME/.cache/yay/neovim-nightly-bin && \
            yay -Y --gendb && yay -S neovim-nightly-bin --noconfirm

        echo -e "${CYAN}Install python packages${RESET}"
        packages=(python-language-server python-pycodestyle python-jedi
                  python-flake8-debugger flake8 autopep8 jupyter screen)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Install c/c++ packages${RESET}"
        packages=(ccls lldb cmake gcc astyle gdb gdb-common lua-language-server)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Install bash packages${RESET}"
        packages=(bash-language-server)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Install vimls packages${RESET}"
        packages=(vim-language-server)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Install octave packages${RESET}"
        packages=(octave)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Install haskell packages${RESET}"
        packages=(hasktags ctags)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Install markdown packages${RESET}"
        packages=(zathura zathura-pdf-mupdf zathura-djvu zathura-ps
                  yarn r r-markdown pandoc pandoc-citeproc)
        check install_packages "${packages[*]}"

        echo -e "${CYAN}Install latex packages${RESET}"
        groups=(texlive-most texlive-lang)
        check install_groups "${groups[*]}"
    fi

    echo -e "${BLUE}Configure vim${RESET}"
    [[ -d $HOME/.config/nvim ]] && check rm -rf $HOME/.config/nvim
    check cp -r $DOTFILES/.config/nvim $HOME/.config

    [[ -d $HOME/.local/share/nvim/site ]] && check rm -rf $HOME/.local/share/nvim/site
    check mkdir -p $HOME/.local/share/nvim
    check cp -r $DOTFILES/.local/share/nvim/site $HOME/.local/share/nvim

    echo -e "${BLUE}Configure flake${RESET}"
    check cp $DOTFILES/.config/flake8 $HOME/.config

    echo -e "${BLUE}Configure packet manager${RESET}"
    check curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > installer.sh
    [[ -d $HOME/.cache/dein ]] && check rm -rf $HOME/.cache/dein
    check sh installer.sh $HOME/.cache/dein
    check rm installer.sh

    echo -e "${BLUE}Install packages${RESET}"
    check nvim --clean '+source ~/.config/nvim/init.vim' +DeinInstall +UpdateRemotePlugins +qall
    check nvim '+TSInstallSync all' +qall
}

clean_up() {
    current_dir=$(pwd)

    check cd $HOME/.dotfiles
    check find . -maxdepth 1 -type d,f ! -iname .git -exec rm -rvf {} \; > /dev/null 2>&1
    check cd $current_dir
}


INSTALL_PKGS=1
parsed_args=$(getopt -a -n rice \
                     -o hwvsbac \
                     --long help,wm,vim,sh,boot,all,config-only -- "$@")

[[ $? != 0 ]] && usage && exit

eval set -- "$parsed_args"
while :; do
    case "$1" in
        -h | --help)
            usage;
            exit ;;
        -a | --all)
            opts=(wm sh boot vim);
            shift ;;
        -w | --wm)
            (printf '%s\n' "${opts[@]}" | grep -xq 'wm') || opts+=(wm);
            shift ;;
        -s | --sh)
            (printf '%s\n' "${opts[@]}" | grep -xq 'sh') || opts+=(sh);
            shift ;;
        -b | --boot)
            (printf '%s\n' "${opts[@]}" | grep -xq 'boot') || opts+=(boot);
            shift ;;
        -v | --vim)
            (printf '%s\n' "${opts[@]}" | grep -xq 'vim') || opts+=(vim);
            shift ;;
        -c | --config-only)
            INSTALL_PKGS=0;
            shift ;;
        --)
            shift;
            break ;;
        *)
            echo "Unexpected option: $1";
            usage;
            exit ;;
    esac
done

# If no option is specified
[[ ${#opts[@]} == 0 ]] && opts=(wm sh boot vim)

get_dotfiles && echo

if [[ $INSTALL_PKGS == 1 ]]; then
    setup_yay
    check sudo pacman -Sy archlinux-keyring --noconfirm && sudo pacman -Su --noconfirm
fi

for opt in ${opts[@]}; do
    if [[ $opt == wm ]]; then
        setup_wm
    elif [[ $opt == sh ]]; then
        setup_sh
    elif [[ $opt == boot ]]; then
        setup_boot
    elif [[ $opt == vim ]]; then
        setup_vim
    else
        echo -e "${RED}Unknown option:${RESET} ${opt}" && exit
    fi
done

clean_up
